#!/bin/bash

# üß™ Script para executar todos os testes do Sistema Di√°rio de Bordo Digital
# Executa testes de conformidade ANAC, unit√°rios, integra√ß√£o e performance

set -e  # Parar em caso de erro

echo "üöÄ Iniciando execu√ß√£o completa de testes..."
echo "üìÖ $(date)"
echo "==============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
        "SUCCESS")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
    esac
}

# Verificar se .NET est√° instalado
if ! command -v dotnet &> /dev/null; then
    print_status "ERROR" ".NET SDK n√£o encontrado. Instale o .NET 9.0 SDK"
    exit 1
fi

# Verificar vers√£o do .NET
DOTNET_VERSION=$(dotnet --version)
print_status "INFO" "Usando .NET SDK vers√£o: $DOTNET_VERSION"

# Criar diret√≥rio para resultados
RESULTS_DIR="./test-results"
mkdir -p $RESULTS_DIR/{domain,infrastructure,api,coverage}

print_status "INFO" "Restaurando depend√™ncias..."
dotnet restore

print_status "INFO" "Compilando solu√ß√£o..."
dotnet build --configuration Release --no-restore

if [ $? -ne 0 ]; then
    print_status "ERROR" "Falha na compila√ß√£o"
    exit 1
fi

print_status "SUCCESS" "Compila√ß√£o conclu√≠da com sucesso"

echo ""
echo "üèõÔ∏è TESTES DE CONFORMIDADE ANAC"
echo "==============================="

print_status "INFO" "Executando testes de conformidade Resolu√ß√£o 457/2017 (17 campos obrigat√≥rios)..."
dotnet test tests/DiarioBordo.Domain.Tests \
    --filter "FullyQualifiedName~AnacCompliance" \
    --configuration Release \
    --no-build \
    --logger "trx;LogFileName=anac-compliance.trx" \
    --results-directory $RESULTS_DIR/domain \
    --verbosity normal

if [ $? -eq 0 ]; then
    print_status "SUCCESS" "Conformidade Resolu√ß√£o 457/2017 ‚úÖ"
else
    print_status "ERROR" "Falha nos testes de conformidade 457/2017"
    exit 1
fi

print_status "INFO" "Executando testes de assinatura digital Resolu√ß√£o 458/2017..."
dotnet test tests/DiarioBordo.Domain.Tests \
    --filter "FullyQualifiedName~AssinaturaDigital" \
    --configuration Release \
    --no-build \
    --logger "trx;LogFileName=digital-signature.trx" \
    --results-directory $RESULTS_DIR/domain \
    --verbosity normal

if [ $? -eq 0 ]; then
    print_status "SUCCESS" "Conformidade Resolu√ß√£o 458/2017 ‚úÖ"
else
    print_status "ERROR" "Falha nos testes de assinatura digital 458/2017"
    exit 1
fi

echo ""
echo "üß™ TESTES UNIT√ÅRIOS"
echo "==================="

print_status "INFO" "Executando testes unit√°rios do Domain..."
dotnet test tests/DiarioBordo.Domain.Tests \
    --configuration Release \
    --no-build \
    --logger "trx;LogFileName=domain-tests.trx" \
    --collect:"XPlat Code Coverage" \
    --results-directory $RESULTS_DIR/domain

DOMAIN_EXIT_CODE=$?

print_status "INFO" "Executando testes de reposit√≥rio (Infrastructure)..."
dotnet test tests/DiarioBordo.Infrastructure.Tests \
    --configuration Release \
    --no-build \
    --logger "trx;LogFileName=infrastructure-tests.trx" \
    --collect:"XPlat Code Coverage" \
    --results-directory $RESULTS_DIR/infrastructure

INFRA_EXIT_CODE=$?

echo ""
echo "üåê TESTES DE INTEGRA√á√ÉO"
echo "======================="

print_status "INFO" "Executando testes de integra√ß√£o da API..."
dotnet test tests/DiarioBordo.API.Tests \
    --configuration Release \
    --no-build \
    --logger "trx;LogFileName=api-tests.trx" \
    --collect:"XPlat Code Coverage" \
    --results-directory $RESULTS_DIR/api

API_EXIT_CODE=$?

echo ""
echo "‚ö° TESTES DE PERFORMANCE"
echo "======================"

print_status "INFO" "Verificando performance da consulta dos √∫ltimos 30 dias..."
print_status "INFO" "Requisito: < 500ms conforme Art. 8¬∫ II Resolu√ß√£o 457/2017"

dotnet test tests/DiarioBordo.Infrastructure.Tests \
    --filter "FullyQualifiedName~UltimosTrindaDias" \
    --configuration Release \
    --no-build \
    --logger "trx;LogFileName=performance-tests.trx" \
    --results-directory $RESULTS_DIR/infrastructure \
    --verbosity detailed

PERF_EXIT_CODE=$?

echo ""
echo "üîí VERIFICA√á√ïES DE SEGURAN√áA"
echo "============================"

print_status "INFO" "Verificando vulnerabilidades em pacotes NuGet..."
dotnet list package --vulnerable --include-transitive > $RESULTS_DIR/vulnerability-report.txt 2>&1

if grep -q "Critical\|High" $RESULTS_DIR/vulnerability-report.txt; then
    print_status "WARNING" "Vulnerabilidades encontradas - veja $RESULTS_DIR/vulnerability-report.txt"
else
    print_status "SUCCESS" "Nenhuma vulnerabilidade cr√≠tica encontrada"
fi

print_status "INFO" "Verificando configura√ß√µes de seguran√ßa..."
if find src/ -name "*.cs" -o -name "*.json" | xargs grep -l "password\|secret\|key" | grep -v "Password" | grep -v "Key" > /dev/null 2>&1; then
    print_status "WARNING" "Poss√≠veis secrets hardcoded encontrados"
else
    print_status "SUCCESS" "Nenhum secret hardcoded encontrado"
fi

echo ""
echo "üìä RELAT√ìRIO DE COBERTURA"
echo "========================="

# Verificar se ReportGenerator est√° instalado
if ! command -v reportgenerator &> /dev/null; then
    print_status "INFO" "Instalando ReportGenerator..."
    dotnet tool install -g dotnet-reportgenerator-globaltool
fi

print_status "INFO" "Gerando relat√≥rio de cobertura..."
reportgenerator \
    -reports:"$RESULTS_DIR/**/coverage.cobertura.xml" \
    -targetdir:"$RESULTS_DIR/coverage" \
    -reporttypes:"HtmlInline_AzurePipelines;TextSummary" \
    -historydir:"$RESULTS_DIR/coverage/history"

if [ -f "$RESULTS_DIR/coverage/Summary.txt" ]; then
    print_status "INFO" "Resumo da cobertura:"
    cat "$RESULTS_DIR/coverage/Summary.txt"
    print_status "INFO" "Relat√≥rio completo dispon√≠vel em: $RESULTS_DIR/coverage/index.html"
else
    print_status "WARNING" "N√£o foi poss√≠vel gerar relat√≥rio de cobertura"
fi

echo ""
echo "üìã RESUMO DOS RESULTADOS"
echo "======================="

# Verificar resultados
TOTAL_FAILURES=0

if [ $DOMAIN_EXIT_CODE -eq 0 ]; then
    print_status "SUCCESS" "Testes Domain: PASSOU"
else
    print_status "ERROR" "Testes Domain: FALHOU"
    TOTAL_FAILURES=$((TOTAL_FAILURES + 1))
fi

if [ $INFRA_EXIT_CODE -eq 0 ]; then
    print_status "SUCCESS" "Testes Infrastructure: PASSOU"
else
    print_status "ERROR" "Testes Infrastructure: FALHOU"
    TOTAL_FAILURES=$((TOTAL_FAILURES + 1))
fi

if [ $API_EXIT_CODE -eq 0 ]; then
    print_status "SUCCESS" "Testes API: PASSOU"
else
    print_status "ERROR" "Testes API: FALHOU"
    TOTAL_FAILURES=$((TOTAL_FAILURES + 1))
fi

if [ $PERF_EXIT_CODE -eq 0 ]; then
    print_status "SUCCESS" "Testes Performance: PASSOU"
else
    print_status "ERROR" "Testes Performance: FALHOU"
    TOTAL_FAILURES=$((TOTAL_FAILURES + 1))
fi

echo ""
echo "==============================================="

if [ $TOTAL_FAILURES -eq 0 ]; then
    print_status "SUCCESS" "üéâ TODOS OS TESTES PASSARAM!"
    print_status "SUCCESS" "‚úÖ Sistema em conformidade com ANAC 457/2017 e 458/2017"
    print_status "SUCCESS" "‚úÖ Qualidade e seguran√ßa verificadas"
    echo ""
    echo "üöÄ Sistema Di√°rio de Bordo Digital pronto para deployment!"
    exit 0
else
    print_status "ERROR" "‚ùå $TOTAL_FAILURES conjunto(s) de testes falharam"
    print_status "ERROR" "üîç Verifique os logs em $RESULTS_DIR/"
    echo ""
    echo "‚ö†Ô∏è  Corrija os problemas antes do deployment"
    exit 1
fi